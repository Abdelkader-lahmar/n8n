"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.YoutubeTranscriptNode = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const puppeteer_extra_1 = __importDefault(require("puppeteer-extra"));
const puppeteer_extra_plugin_stealth_1 = __importDefault(require("puppeteer-extra-plugin-stealth"));
class YoutubeTranscriptNode {
    constructor() {
        this.description = {
            displayName: 'Youtube Transcript',
            name: 'youtubeTranscriptNode',
            icon: 'file:youTube.png',
            group: ['transform'],
            version: 1,
            description: 'Get Transcript of a youtube video',
            defaults: {
                name: 'Youtube Transcript',
            },
            inputs: ['main'],
            outputs: ['main'],
            properties: [
                {
                    displayName: 'Youtube Video ID or Url',
                    name: 'youtubeId',
                    type: 'string',
                    default: '',
                    placeholder: 'Youtube Video ID or Url',
                },
            ],
        };
    }
    async execute() {
        puppeteer_extra_1.default.use((0, puppeteer_extra_plugin_stealth_1.default)());
        const checkBrowserWorks = async function () {
            let browser = null;
            try {
                browser = await puppeteer_extra_1.default.launch({
                    headless: true,
                    args: [
                        '--ignore-certificate-errors',
                        '--no-sandbox',
                        '--disable-setuid-sandbox',
                        '--disable-accelerated-2d-canvas',
                        '--disable-gpu'
                    ],
                    ignoreDefaultArgs: ['--enable-automation'],
                });
            }
            catch (error) {
                throw new n8n_workflow_1.ApplicationError(`Failed to launch the browser: ${error.message}`);
            }
            finally {
                if (browser)
                    await browser.close();
            }
        };
        const getTranscriptFromYoutube = async function (youtubeId) {
            let browser = null;
            let page = null;
            try {
                browser = await puppeteer_extra_1.default.launch({
                    headless: true,
                    args: [
                        '--ignore-certificate-errors',
                        '--no-sandbox',
                        '--disable-setuid-sandbox',
                        '--disable-accelerated-2d-canvas',
                        '--disable-gpu'
                    ],
                    ignoreDefaultArgs: ['--enable-automation'],
                });
                page = await browser.newPage();
                const url = `https://www.youtube.com/watch?v=${youtubeId}`;
                await page.goto(url, { waitUntil: 'domcontentloaded' });
                await page.evaluate(() => {
                    const cookieButton = document.querySelector('button[aria-label*="cookie"], button[aria-label*="cookies"]');
                    cookieButton === null || cookieButton === void 0 ? void 0 : cookieButton.click();
                });
                const transcriptButtonAvailable = await page
                    .waitForSelector('ytd-video-description-transcript-section-renderer button', {
                    timeout: 10000,
                })
                    .catch(() => null);
                if (!transcriptButtonAvailable) {
                    throw new n8n_workflow_1.ApplicationError(`The video with ID ${youtubeId} either does not exist or does not have a transcript available. Please check the video URL or try again later.`);
                }
                await page.evaluate(() => {
                    const transcriptButton = document.querySelector('ytd-video-description-transcript-section-renderer button');
                    transcriptButton === null || transcriptButton === void 0 ? void 0 : transcriptButton.click();
                });
                await page.waitForSelector('#segments-container', { timeout: 10000 });
                const transcript = await page.evaluate(() => {
                    return Array.from(document.querySelectorAll('#segments-container yt-formatted-string'))
                        .map((element) => { var _a; return ((_a = element.textContent) === null || _a === void 0 ? void 0 : _a.trim()) || ''; })
                        .filter((text) => text !== '');
                });
                return transcript;
            }
            catch (error) {
                if (error instanceof n8n_workflow_1.ApplicationError) {
                    throw error;
                }
                else {
                    throw new n8n_workflow_1.ApplicationError(`Failed to extract transcript: ${error.message}`);
                }
            }
            finally {
                if (page)
                    await page.close();
                if (browser)
                    await browser.close();
            }
        };
        try {
            await checkBrowserWorks();
        }
        catch (error) {
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), error, {
                message: 'Failed to launch the browser before processing.',
            });
        }
        const items = this.getInputData();
        const returnData = [];
        let youtubeId;
        for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {
            try {
                youtubeId = this.getNodeParameter('youtubeId', itemIndex, '');
                const urlRegex = /^(http(s)?:\/\/)?((w){3}.)?youtu(be|.be)?(\.com)?\/.+/;
                if (urlRegex.test(youtubeId)) {
                    const url = new URL(youtubeId);
                    if (url.hostname === 'youtu.be') {
                        youtubeId = url.pathname.slice(1);
                    }
                    else {
                        const v = url.searchParams.get('v');
                        if (!v) {
                            throw new n8n_workflow_1.ApplicationError(`The provided URL doesn't contain a valid YouTube video identifier. URL: ${youtubeId}`);
                        }
                        youtubeId = v;
                    }
                }
                const transcript = await getTranscriptFromYoutube(youtubeId);
                let text = '';
                for (const line of transcript) {
                    text += line + ' ';
                }
                returnData.push({
                    json: {
                        youtubeId: youtubeId,
                        text: text,
                    },
                    pairedItem: { item: itemIndex },
                });
            }
            catch (error) {
                if (this.continueOnFail()) {
                    items.push({ json: this.getInputData(itemIndex)[0].json, error, pairedItem: itemIndex });
                }
                else {
                    if (error.context) {
                        error.context.itemIndex = itemIndex;
                        throw error;
                    }
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), error, {
                        itemIndex,
                    });
                }
            }
        }
        return [returnData];
    }
}
exports.YoutubeTranscriptNode = YoutubeTranscriptNode;
//# sourceMappingURL=YoutubeTranscriptNode.node.js.map